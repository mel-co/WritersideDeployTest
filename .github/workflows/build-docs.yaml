name: Build documentation

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  id-token: write
  pages: write

env:
  INSTANCE: 'Writerside/all'
  DOCKER_VERSION: '2025.04.8412'
  IS_GROUP: 'true'  # Uncomment to build a group
  FOLDER_TO_FLATTEN: 'artifacts/WritersideDeployTest'
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          INSTANCE=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}
          is-group: ${{ env.IS_GROUP }}
          artifact: ${{ steps.define-ids.outputs.artifact }}

      - name: Flatten folder structure
        run: |
          # Find the first zip file in the artifacts directory
          zip_file=$(find . -name "*.zip" | head -n 1)
      
          if [ -z "$zip_file" ]; then
            echo "No zip file found in artifacts."
            exit 1
          fi
      
          echo "Processing zip file: $zip_file"
      
          # Create a temporary directory for unzipping
          unzip_dir="unzipped_temp"
          mkdir -p "$unzip_dir"
      
          # Unzip the file
          unzip "$zip_file" -d "$unzip_dir"
      
          # Find the first directory inside the unzipped contents
          first_dir=$(find "$unzip_dir" -mindepth 1 -maxdepth 1 -type d | head -n 1)
      
          if [ -z "$first_dir" ]; then
            echo "No directory found inside the zip file."
            exit 1
          fi
      
          echo "Moving contents from: $first_dir"
      
          # Move everything from the subdirectory to the root of the unzipped directory
          mv "$first_dir"/* "$unzip_dir"/
      
          # Remove the now-empty directory
          rmdir "$first_dir"
      
          # Remove the original zip file
          rm "$zip_file"
      
          # Re-zip the contents, overwriting the original zip file name
          (cd "$unzip_dir" && zip -r "../${zip_file##*/}" .)
      
          # Optional: Clean up the temporary directory
          rm -r "$unzip_dir"

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: artifacts/*
          retention-days: 7
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4