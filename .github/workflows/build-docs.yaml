name: Build documentation

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  id-token: write
  pages: write

env:
  INSTANCE: 'Writerside/all'
  DOCKER_VERSION: '2025.04.8412'
  IS_GROUP: 'true'  # Uncomment to build a group
  FOLDER_TO_FLATTEN: 'artifacts/WritersideDeployTest'
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          INSTANCE=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}
          is-group: ${{ env.IS_GROUP }}
          artifact: ${{ steps.define-ids.outputs.artifact }}

      - name: Flatten folder structure
        run: |
          # Exit immediately if a command fails
          set -e
      
          # Find the first zip file in the current directory and subdirectories
          original_zip_path=$(find . -name "*.zip" | head -n 1)
      
          if [[ -z "$original_zip_path" ]]; then
            echo "Error: No zip file found to process."
            exit 1
          fi
      
          echo "Processing Zip File: $original_zip_path"
      
          # Define a temporary directory for extraction
          temp_unzip_dir="unzip_workdir"
          mkdir -p "$temp_unzip_dir"
      
          # Unzip the original file quietly into the working directory
          unzip -q "$original_zip_path" -d "$temp_unzip_dir"
      
          # Find the first directory inside the unzipped contents
          first_dir=$(find "$temp_unzip_dir" -mindepth 1 -maxdepth 1 -type d | head -n 1)
      
          if [[ -z "$first_dir" ]]; then
            echo "Error: No subdirectory found inside the zip file. The zip might already be in the correct format."
            # Clean up and exit gracefully if no directory is found
            rm -r "$temp_unzip_dir"
            exit 0
          fi
      
          echo "Found subdirectory to flatten: $first_dir"
      
          # Move all contents (including hidden files) from the subdirectory up to the root of the working directory
          # shopt -s dotglob ensures '*' matches dotfiles (like .git)
          shopt -s dotglob
          mv "$first_dir"/* "$temp_unzip_dir/"
          shopt -u dotglob # Disable dotglob after use
      
          # Remove the now-empty subdirectory
          rmdir "$first_dir"
      
          # Define paths and filenames for clarity
          original_zip_filename=$(basename "$original_zip_path")
          original_zip_dir=$(dirname "$original_zip_path")
          new_zip_path_temp="$original_zip_dir/temp_new_$original_zip_filename"
      
          echo "Re-zipping contents into a temporary archive..."
          # Create the new zip from the contents of the working directory
          (cd "$temp_unzip_dir" && zip -qr "$new_zip_path_temp" .)
      
          # --- Atomic Replacement ---
          echo "Replacing original zip with the new version."
          # 1. Remove the original old zip file
          rm "$original_zip_path"
          # 2. Rename the new zip to the original's name
          mv "$new_zip_path_temp" "$original_zip_path"
      
          echo "Successfully restructured and replaced: $original_zip_path"
      
          # Clean up the temporary working directory
          rm -r "$temp_unzip_dir"

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: artifacts/*
          retention-days: 7
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4